generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  relationMode = "prisma"
}

model Users {
  user_id             String     @id
  name                String     @default("Student-C137")
  email               String     @unique
  hashedPassword      String
  resetToken          String?
  resetTokenExpiry    DateTime?
  role                String     @default("student")
  status              String     @default("active")
  contact             String
  profilePicture      String?    @default("/noProfile.png")

  student             Students?
  counselor           Counselors?
  teacher             Teachers?
  userResources       User_Resources[]
  notifications       Notifications[]
  notificationStatus  NotificationStatus[]
}

model Students {
  student           Users      @relation(fields: [student_id], references: [user_id])
  student_id        String     @id 
  grade_level       String?  
  program           String?
  department        String?
  eventRegistrations Event_Registration[]
  referral          Referrals[]
  appointment       Appointments[]
  appraisals         StudentAppraisal[]
  request           Appointment_Requests[]
}

model Events {
  event_id          Int        @id @default(autoincrement())
  title             String
  description       String
  date_time         DateTime
  location          String
  link              String?
  img_path          String?
  forDepartment     String?
  limit             Int?
  grade_level       String?

  eventRegistrations Event_Registration[] 
}

model Event_Registration {
  event             Events     @relation(fields: [event_id], references: [event_id])
  event_id          Int        
  student           Students   @relation(fields: [student_id], references: [student_id])
  student_id        String     
  description       String
  date_time         DateTime
  location          String
  @@id([event_id, student_id])
}

model Counselors {
  counselor         Users      @relation(fields: [counselor_id], references: [user_id])
  counselor_id      String     @id
  department        String

  referral          Referrals[]
  appointment       Appointments[]
  appraisalTemplate AppraisalTemplate[]
}

model Appointment_Requests {
  request_id      Int         @id @default(autoincrement())
  student         Students    @relation(fields: [student_id], references: [student_id])
  student_id      String
  name            String
  grade           String
  reason          String
  urgency         String
  contact         String
  role            String
  notes           String
  type            String?
  request_date    DateTime
}

model Appointments {
  appointment_id  Int         @id @default(autoincrement())
  student         Students    @relation(fields: [student_id], references: [student_id])
  student_id      String
  counselor       Counselors  @relation(fields: [counselor_id], references: [counselor_id])
  counselor_id    String
  date_time       DateTime
  type            String
  counsel_type    String?
  notes           String
  status          String
  reason          String?
  referral        Referrals? 
}

model Referrals {
  referral_id   Int       @id @default(autoincrement())
  student       Students  @relation(fields: [student_id], references: [student_id])
  student_id    String
  teacher       Teachers  @relation(fields: [teacher_id], references: [teacher_id])
  teacher_id    String
  reason        String
  notes         String
  counselor     Counselors  @relation(fields: [counselor_id], references: [counselor_id])
  counselor_id  String
  status        String
  dateSubmitted DateTime?
  appointment   Appointments? @relation(fields: [appointment_id], references: [appointment_id])
  appointment_id Int? @unique
}

model Teachers {
  teacher           Users      @relation(fields: [teacher_id], references: [user_id])
  teacher_id        String     @id
  department        String

  referral          Referrals[]
}

model Resources {
  resource_id       Int        @id @default(autoincrement())
  title             String
  description       String
  link              String
  img_path          String?
  category          String
  createdAt         DateTime?   @default(now())
  
  userResources     User_Resources[]
}


model User_Resources {
  user              Users      @relation(fields: [user_id], references: [user_id])
  user_id           String
  resource          Resources  @relation(fields: [resource_id], references: [resource_id])
  resource_id       Int
  access_date       DateTime
  liked             Boolean    @default(false)
  @@id([user_id, resource_id])
}

model Notifications {
  notification_id     Int                 @id @default(autoincrement())
  user_id            String?             // sender or "000"/"001" for broadcast
  title              String
  content            String
  date               DateTime
  createdAt          DateTime            @default(now())
  notificationStatus NotificationStatus[]
  user               Users?              @relation(fields: [user_id], references: [user_id])
}

model NotificationStatus {
  id              Int           @id @default(autoincrement())
  notification    Notifications @relation(fields: [notification_id], references: [notification_id])
  notification_id Int
  user            Users         @relation(fields: [user_id], references: [user_id])
  user_id         String
  isRead          Boolean       @default(false)
  isDeleted       Boolean       @default(false)
  readAt          DateTime?
  deletedAt       DateTime?

  @@unique([notification_id, user_id])
}

model AppraisalTemplate {
  id                Int       @id @default(autoincrement())
  title             String
  description       String
  counselor         Counselors @relation(fields: [counselor_id], references: [counselor_id])
  counselor_id      String
  createdAt         DateTime  @default(now())
  isActive          Boolean   @default(true)
  forDepartment     String?   // Optional: target specific departments
  categories        AppraisalCategory[]
  studentResponses  StudentAppraisal[]
  evaluationCriteria EvaluationCriteria[]
}

model AppraisalCategory {
  id                Int       @id @default(autoincrement())
  template          AppraisalTemplate @relation(fields: [template_id], references: [id])
  template_id       Int
  name              String
  description       String?
  questions         CategoryQuestion[]
  responses         CategoryResponse[]
  evaluationCriteria EvaluationCriteria[]
}

model CategoryQuestion {
  id                Int       @id @default(autoincrement())
  category          AppraisalCategory @relation(fields: [category_id], references: [id])
  category_id       Int
  question          String
  isActive          Boolean   @default(true)
  responses         QuestionResponse[]
}

model EvaluationCriteria {
  id                Int       @id @default(autoincrement())
  template          AppraisalTemplate @relation(fields: [template_id], references: [id])
  template_id       Int
  category          AppraisalCategory? @relation(fields: [category_id], references: [id])  // Made optional
  category_id       Int?      // null means overall evaluation
  minScore          Float
  maxScore          Float
  evaluation        String    // e.g., "Excellent", "Needs Improvement"
  description       String
  suggestion        String
}

model QuestionResponse {
  id                Int       @id @default(autoincrement())
  categoryResponse  CategoryResponse @relation(fields: [category_response_id], references: [id])
  category_response_id Int
  question          CategoryQuestion @relation(fields: [question_id], references: [id])
  question_id       Int
  response          Int      // 1-5 Likert scale
}

model CategoryResponse {
  id                Int       @id @default(autoincrement())
  appraisal         StudentAppraisal @relation(fields: [appraisal_id], references: [id])
  appraisal_id      Int
  category          AppraisalCategory @relation(fields: [category_id], references: [id])
  category_id       Int
  score             Float
  questionResponses QuestionResponse[]
}

model StudentAppraisal {
  id                Int       @id @default(autoincrement())
  template          AppraisalTemplate @relation(fields: [template_id], references: [id])
  template_id       Int
  student           Students  @relation(fields: [student_id], references: [student_id])
  student_id        String
  submittedAt       DateTime  @default(now())
  categoryResponses CategoryResponse[]
  
  @@unique([template_id, student_id])
}

model Check {
  check_id    String    @id
  role        String
}
